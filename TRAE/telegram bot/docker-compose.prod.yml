version: '3.8'

services:
  # PostgreSQL 数据库 + PostGIS 扩展
  postgres:
    image: postgis/postgis:15-3.3
    container_name: telegram-bot-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-telegram_bot_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telegram-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-telegram_bot_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - telegram-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI 应用服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: telegram-bot-api
    environment:
      - DEBUG=${DEBUG:-False}
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-telegram_bot_db}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # S3 配置
      - STORAGE_BACKEND=${STORAGE_BACKEND:-local}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL}
      - AWS_S3_PUBLIC_READ=${AWS_S3_PUBLIC_READ:-false}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telegram-bot-network
    restart: unless-stopped

  # Telegram Bot 服务
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: telegram-bot-service
    environment:
      - DEBUG=${DEBUG:-False}
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-telegram_bot_db}
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_BASE_URL=http://api:8000
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - telegram-bot-network
    restart: unless-stopped
    command: python app/bot/main.py

  # Celery Worker 异步任务处理
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: telegram-bot-celery-worker
    environment:
      - DEBUG=${DEBUG:-False}
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-telegram_bot_db}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telegram-bot-network
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=info -Q celery,ai_moderation,notifications

  # 商品审核Worker服务
  moderation-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: telegram-bot-moderation-worker
    environment:
      - DEBUG=${DEBUG:-False}
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-telegram_bot_db}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - API_BASE_URL=http://api:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    ports:
      - "8001:8001"  # 暴露Prometheus指标端口
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - telegram-bot-network
    restart: unless-stopped
    command: python -m app.workers.moderation_worker

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  telegram-bot-network:
    driver: bridge